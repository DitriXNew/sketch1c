
&НаКлиенте
Перем МенеджерПроекта;

&НаКлиенте
Перем МенеджерФайлов;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НовыйПроект();
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйПроект() 
	СоздатьНовыйПроект();
	ОпределитьВидимостьПодсказокКоманд(Ложь);
	СкрытьВсеСтраницыКромеТекущей();
	ОбработатьИзменениеНастроекПроекта();
	ОпределитьМенеджераФайлов();
	Если ЗагружатьСвойстваИзФайла Тогда
		ВыполнитьЗагрузкуСвойствИзФайла();
		
	Иначе
		ВыполнитьЗагрузкуСвойствИзМакета();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьМенеджераФайлов() 
	Если ВерсияПлатформыСтаршеИлиРавнаТребуемойВерсии("8.3.15.0") Тогда
		МенеджерФайлов = ПолучитьФорму("ВнешняяОбработка.Эскиз.Форма.МенеджерФайлов_8_3_15");
		
	ИначеЕсли ВерсияПлатформыСтаршеИлиРавнаТребуемойВерсии("8.3.6.0") Тогда
		МенеджерФайлов = ПолучитьФорму("ВнешняяОбработка.Эскиз.Форма.МенеджерФайлов_8_3_6");
		
	Иначе
		ВызватьИсключение "Не удалось определить менеджера файлов.";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВерсияПлатформыСтаршеИлиРавнаТребуемойВерсии(Знач ТребуемаяВерсия)
	Результат = Истина;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	
	КоличествоИтераций = 0;
	Пока Не КоличествоИтераций = 3 Цикл
		НомерПлатформы = Число(Лев(ВерсияПлатформы, Найти(ВерсияПлатформы, ".") - 1));
		НомерТребуемой = Число(Лев(ТребуемаяВерсия, Найти(ТребуемаяВерсия, ".") - 1));
		
		Если НомерПлатформы < НомерТребуемой Тогда
			Результат = Ложь;
			
			Прервать;
		КонецЕсли;

		ВерсияПлатформы = Сред(ВерсияПлатформы, Найти(ВерсияПлатформы, ".") + 1); 
		ТребуемаяВерсия = Сред(ТребуемаяВерсия, Найти(ТребуемаяВерсия, ".") + 1); 
		
		КоличествоИтераций = КоличествоИтераций + 1;
		
	КонецЦикла;

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйПроект() 
	МенеджерПроекта = ПолучитьФорму("ВнешняяОбработка.Эскиз.Форма.Проект");
	МенеджерПроекта.СоздатьПроект();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроект(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПроектЗавершение", ЭтотОбъект);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Фильтр = "Файл проекта(*.json)|*.json";
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроектЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Файл проекта не выбран.";
		Сообщение.Сообщить();	
		
		Возврат;
	КонецЕсли;
	
	РасположениеПроекта = ВыбранныеФайлы[0];
	
	Проект = ДесериализоватьИзJSON(РасположениеПроекта, Истина);
	ФормыИЭлементыУправленияИзМассиваРекурсивно(Проект.Прототипы, ФормыИЭлементыУправления);
	МенеджерПроекта.ЗагрузитьВспомогательныеДанные(Проект.ВспомогательныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормыИЭлементыУправленияИзМассиваРекурсивно(Строки, Родитель) 
	Для Каждого Строка Из Строки Цикл
		НоваяСтрока = Родитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если НоваяСтрока.Тип = МенеджерПроекта.Типы().ФормаКлиентскогоПриложения Тогда
			МенеджерПроекта.ОткрытьПрототип(НоваяСтрока, ЭтаФорма, Ложь);
			
		Иначе
			Если НоваяСтрока.Тип = МенеджерПроекта.Типы().ГруппаФормы Тогда
				Связать = Ложь;
				Ключи = "Имя,Тип,Вид,Родитель,Прототип";

			ИначеЕсли НоваяСтрока.Тип = МенеджерПроекта.Типы().ПолеФормы Тогда
				Связать = Истина;
				Ключи = "Имя,Тип,Вид,Родитель,Прототип,Путь,ПутьКДанным,ТипЗначения";
				
			ИначеЕсли НоваяСтрока.Тип = МенеджерПроекта.Типы().КнопкаФормы Тогда
				Связать = Истина;
				Ключи = "Имя,Тип,Вид,Родитель,Прототип";
				
			КонецЕсли;
			
			ДополнитьКлючиСвойств(Ключи, НоваяСтрока);
			СвойстваЭлементаУправления = Новый Структура(Ключи);
			ЗаполнитьЗначенияСвойств(СвойстваЭлементаУправления, НоваяСтрока);
			
			МенеджерПроекта.ДобавитьЭлементУправления(СвойстваЭлементаУправления, Связать, Ложь);
			
		КонецЕсли;
		
		ДочерниеСтроки = Строка.Строки;
		Если ДочерниеСтроки.Количество() Тогда
			ФормыИЭлементыУправленияИзМассиваРекурсивно(ДочерниеСтроки, НоваяСтрока);
			
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ФормыИЭлементыУправления.ТекущаяСтрока = ФормыИЭлементыУправления.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	Элементы.ФормыИЭлементыУправления.Развернуть(ФормыИЭлементыУправления.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроект(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПроектЗавершение", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, РасположениеПроекта);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОткрытьПроектЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	//	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПроект(Команда)
	Если ПустаяСтрока(РасположениеПроекта) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаПроектаЗавершение", ЭтотОбъект);
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Расширение = "json";
		ДиалогВыбораФайла.Фильтр = "json|*.json";
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		СохранитьПроектПродолжение();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПроектПродолжение() 
	ВспомогательныеДанные = МенеджерПроекта.ПолучитьВспомогательныеДанные();
	
	Адрес = СохранитьПроектНаСервере(ВспомогательныеДанные);
	МенеджерФайлов.СохранитьФайл(РасположениеПроекта, Адрес, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаПроектаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Файл проекта не выбран.";
		Сообщение.Сообщить();	
		
		Возврат;
	КонецЕсли;
	
	РасположениеПроекта = ВыбранныеФайлы[0];
	СохранитьПроектПродолжение();
	
КонецПроцедуры

&НаСервере
Функция СохранитьПроектНаСервере(ВспомогательныеДанные) 
	Результат = "";
	
	ФормыИЭлементыУправленияНаСервере = РеквизитФормыВЗначение("ФормыИЭлементыУправления");
	
	Ключи = "Строки";
	Для Каждого Колонка Из ФормыИЭлементыУправленияНаСервере.Колонки Цикл
		Ключи = Ключи + "," + Колонка.Имя;
		
	КонецЦикла;
	
	Проект = Новый Структура;
	
	Проект.Вставить("ВспомогательныеДанные", ВспомогательныеДанные);
	
	Прототипы = ФормыИЭлементыУправленияВМассивРекурсивно(ФормыИЭлементыУправленияНаСервере.Строки, Ключи);
	Проект.Вставить("Прототипы", Прототипы);
	
	Json = СериализоватьВJSON(Проект);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Писатель = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Писатель.Записать(Json);
	Писатель.Закрыть();
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		Результат = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ФормыИЭлементыУправленияВМассивРекурсивно(Строки, Ключи)
	Результат = Новый Массив;
	
	Для Каждого Строка Из Строки Цикл
		ДанныеСтроки = Новый Структура(Ключи);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Строка);
		
		ДочерниеСтроки = Строка.Строки;
		Если ДочерниеСтроки.Количество() Тогда
			ДанныеСтроки.Строки = ФормыИЭлементыУправленияВМассивРекурсивно(ДочерниеСтроки, Ключи);		
			
		Иначе
			ДанныеСтроки.Строки = Новый Массив;
			
		КонецЕсли;
		
		Результат.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте                                         
Процедура РасположениеПроектаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РасположениеПроектаОчисткаЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Эскиз будет приведен в исходное состояние! Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, "Эскиз", КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура РасположениеПроектаОчисткаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		МенеджерПроекта.ЗакрытьВсеФормы();
		НовыйПроект();
		ФормыИЭлементыУправления.ПолучитьЭлементы().Очистить();
		РасположениеПроекта = "";
		
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьДеревоФормИЭлементов() 
	
КонецПроцедуры

//---

&НаКлиенте
Процедура ДобавитьФорму(Команда)
	НоваяСтрока = ФормыИЭлементыУправления.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ИндексКартинки = 0;
	
	НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяФормы();
	НоваяСтрока.Имя = НовоеИмя;
	НоваяСтрока.Заголовок = НовоеИмя;
	НоваяСтрока.Тип = МенеджерПроекта.Типы().ФормаКлиентскогоПриложения;
	НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
	НоваяСтрока.КнопкаПоУмолчанию = "";
	
	ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ГоризонтальноеПоложениеПодчиненных,ВертикальноеПоложениеПодчиненных");
	
	МенеджерПроекта.ОткрытьПрототип(НоваяСтрока, ЭтаФорма, Ложь);
	
	Элементы.ФормыИЭлементыУправления.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрототип(Команда)
	ТекущиеДанные = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокуПрототипа = ПолучитьСтрокуПрототипаРекурсивно(ТекущиеДанные);
	
	СвойстваФормы = Новый Структура("Имя,Заголовок,Идентификатор");
	ЗаполнитьЗначенияСвойств(СвойстваФормы, СтрокуПрототипа); 
	
	МенеджерПроекта.ОткрытьПрототип(СвойстваФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ГруппаФормы, МенеджерПроекта.Виды().ОбычнаяГруппа);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКоманднуюПанель(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ГруппаФормы, МенеджерПроекта.Виды().КоманднаяПанель);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодменю(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ГруппаФормы, МенеджерПроекта.Виды().Подменю);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницы(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ГруппаФормы, МенеджерПроекта.Виды().Страницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ГруппаФормы, МенеджерПроекта.Виды().Страница);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКнопку(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().КнопкаФормы, МенеджерПроекта.Виды().ОбычнаяКнопка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКнопкуКоманднойПанели(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().КнопкаФормы, МенеджерПроекта.Виды().КнопкаКоманднойПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГиперссылку(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().КнопкаФормы, МенеджерПроекта.Виды().Гиперссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГиперссылкуКоманднойПанели(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().КнопкаФормы, МенеджерПроекта.Виды().ГиперссылкаКоманднойПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоле(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеВвода);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФлажок(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеФлажка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПереключатель(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеПереключателя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТаблицу(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ТаблицаФормы,, МенеджерПроекта.ТипыЗначения().ТаблицаЗначений);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДерево(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ТаблицаФормы,, МенеджерПроекта.ТипыЗначения().ДеревоЗначений);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонку(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеВвода,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуКолонок(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ГруппаФормы, МенеджерПроекта.Виды().ГруппаКолонок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтекстноеМеню(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ГруппаФормы, МенеджерПроекта.Виды().КонтекстноеМеню);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНадпись(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ДекорацияФормы, МенеджерПроекта.Виды().Надпись);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинку(Команда)
	//ДобавитьЭлементУправления(МенеджерПроекта.Типы().ДекорацияФормы, МенеджерПроекта.Виды().Картинка);
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеКартинки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИндикатор(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеИндикатора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолосуРегулирования(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеПолосыРегулирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКалендарь(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеКалендаря);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФорматированныйДокумент(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеФорматированногоДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФорматированнуюСтроку(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеНадписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТекстовыйДокумент(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеТекстовогоДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТабличныйДокумент(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ПолеФормы, МенеджерПроекта.Виды().ПолеТабличногоДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуКнопок(Команда)
	ДобавитьЭлементУправления(МенеджерПроекта.Типы().ГруппаФормы, МенеджерПроекта.Виды().ГруппаКнопок);
	
КонецПроцедуры

//---

&НаКлиенте
Процедура РедактироватьРоли(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыФормыРолей = Новый Структура;
	ПараметрыФормыРолей.Вставить("РежимРедактированияРолей", Истина);
	ПараметрыФормыРолей.Вставить("ТекущаяРоль", ДанныеВыбора);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("РедактироватьРолиЗавершение", ЭтотОбъект);
	ОткрытьФорму("ВнешняяОбработка.Эскиз.Форма.Роли", ПараметрыФормыРолей, Элементы.Роль,,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьРолиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Роль.СписокВыбора.ЗагрузитьЗначения(РезультатЗакрытия.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПроекта(Команда)
	//Группировки, сортировки, отборы, поиски
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРедактированияСвойств", РежимРедактированияСвойств);
	ПараметрыФормы.Вставить("ЗагружатьСвойстваИзФайла", ЗагружатьСвойстваИзФайла);
	ПараметрыФормы.Вставить("ОтключитьАктивизациюЭлементаВПрототипе", ОтключитьАктивизациюЭлементаВПрототипе);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НастройкиПроектаЗавершение", ЭтотОбъект);
	ОткрытьФорму("ВнешняяОбработка.Эскиз.Форма.НастройкиПроекта", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПроектаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатЗакрытия);
		ОбработатьИзменениеНастроекПроекта();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНастроекПроекта() 
	Элементы.ГруппаКолонокРежимРедактированияСвойств.Видимость = РежимРедактированияСвойств;
	Элементы.ГруппаКнопокРежимРедактированияСвойств.Видимость = РежимРедактированияСвойств;
	
	Если РежимРедактированияСвойств Тогда
		Элементы.СвойстваФормИЭлементовУправления.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто;
		Элементы.Свойство.Видимость = Истина;
		Элементы.СвойстваФормИЭлементовУправления.ОтборСтрок = Неопределено;
		
	Иначе		
		Элементы.СвойстваФормИЭлементовУправления.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		Элементы.Свойство.Видимость = Ложь;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуПрототипаРекурсивно(Элемент) 
	Результат = "";
	
	Родитель = Элемент.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Результат = Элемент;
		
	Иначе
		Результат = ПолучитьСтрокуПрототипаРекурсивно(Родитель);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ФормыИЭлементыУправленияПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;

	ОпределитьСвойства(ТекущиеДанные);
	ОпределитьГруппуКоманд(ТекущиеДанные);
	СкрытьВсеСтраницыКромеТекущей();
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПодключитьОбработчикОжидания("АктивизироватьТекущийЭлемент", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьТекущийЭлемент() Экспорт
	Если ОтключитьАктивизациюЭлементаВПрототипе Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Тип = МенеджерПроекта.Типы().ФормаКлиентскогоПриложения Тогда
		// Активизировать форму
	Иначе
		Прототип = ПолучитьСтрокуПрототипаРекурсивно(ТекущиеДанные).Имя;
		МенеджерПроекта.АктивизироватьТекущийЭлемент(Прототип, ТекущиеДанные.Имя);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыОтбораСвойств(ТекущиеДанные) 
	КлючОтбора = "Отбор_";
	
	ПараметрыОтбора = Новый Структура;
	Если ТекущиеДанные = Неопределено Тогда
		КлючОтбора = КлючОтбора + "Пусто";
		
	ИначеЕсли ТекущиеДанные.Тип = МенеджерПроекта.Типы().ФормаКлиентскогоПриложения Тогда
		КлючОтбора = КлючОтбора + ТекущиеДанные.Тип;
		
	ИначеЕсли ТекущиеДанные.Тип = МенеджерПроекта.Типы().ТаблицаФормы Тогда
		КлючОтбора = КлючОтбора + ТекущиеДанные.Тип + "_";
		КлючОтбора = КлючОтбора + ТекущиеДанные.ТипЗначения;
		
	ИначеЕсли Истина
		И ТекущиеДанные.Тип = МенеджерПроекта.Типы().ПолеФормы
		И ТекущиеДанные.Вид = МенеджерПроекта.Виды().ПолеВвода
		Тогда
		
		КлючОтбора = КлючОтбора + ТекущиеДанные.Тип + "_";
		КлючОтбора = КлючОтбора + ТекущиеДанные.Вид + "_";
		КлючОтбора = КлючОтбора + ТекущиеДанные.ТипЗначения;
		
	Иначе
		КлючОтбора = КлючОтбора + ТекущиеДанные.Тип + "_";
		КлючОтбора = КлючОтбора + ТекущиеДанные.Вид;
		
	КонецЕсли;
	
	ПараметрыОтбора.Вставить(КлючОтбора, Истина);
	
	Возврат ПараметрыОтбора;
КонецФункции

&НаКлиенте
Процедура ДополнитьКлючиСвойств(Ключи, ТекущиеДанные) 
	ПараметрыОтбора = ПолучитьПараметрыОтбораСвойств(ТекущиеДанные);
	
	ИскомыеСтроки = СвойстваФормИЭлементовУправления.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Строка Из ИскомыеСтроки Цикл
		Ключи = Ключи + "," + Строка.Свойство;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСвойства(ТекущиеДанные) Экспорт
	Если РежимРедактированияСвойств Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = ПолучитьПараметрыОтбораСвойств(ТекущиеДанные);
	Элементы.СвойстваФормИЭлементовУправления.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	
	ИскомыеСтроки = СвойстваФормИЭлементовУправления.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Строка Из ИскомыеСтроки Цикл
		ТекущееЗначение = ТекущиеДанные[Строка.Свойство];
		Если ПустаяСтрока(ТекущееЗначение) И Строка.Свойство <> "СписокВыбора"	Тогда
			ИнфоОшибки =  "Для свойства """ + Строка.Свойство + """ не задано значение.";
			ВызватьИсключение ИнфоОшибки;
			
		КонецЕсли;
		
		Строка.Значение = ТекущееЗначение;
		
		Если ТекущиеДанные.Вид = МенеджерПроекта.Виды().ГруппаКолонок Тогда
			ТекущиеДанныеВыбора = Строка.ДанныеВыбора_ГруппаКолонок;
			
		Иначе
			ТекущиеДанныеВыбора = Строка.ДанныеВыбора;
			
		КонецЕсли;

		Если ТекущиеДанныеВыбора.Количество() Тогда
			ИскомоеЗначение = Строка.Значение;
			Если ТипЗнч(Строка.Значение) = Тип("Булево") Тогда
				ИскомоеЗначение = Формат(ИскомоеЗначение, "БЛ=Нет; БИ=Да");
				
			КонецЕсли;
			
			ИскомыйЭлемент = ТекущиеДанныеВыбора.НайтиПоЗначению(ИскомоеЗначение);
			Строка.ЗначениеПредставление = ИскомыйЭлемент.Представление;
			
		Иначе
			Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
				Строка.ЗначениеПредставление = ТекущееЗначение;
			
			Иначе
				Строка.ЗначениеПредставление = "...";
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьГруппуКоманд(ТекущиеДанные) 
	Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаКоманды_Все;
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаКоманды_НачалоРаботы;
		
	ИначеЕсли ТекущиеДанные.Тип = МенеджерПроекта.Типы().ГруппаФормы Тогда
		Если ТекущиеДанные.Вид = МенеджерПроекта.Виды().Страницы Тогда
			Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаКоманды_Страницы;
			
		ИначеЕсли Ложь
			Или ТекущиеДанные.Вид = МенеджерПроекта.Виды().КоманднаяПанель
			Или ТекущиеДанные.Вид = МенеджерПроекта.Виды().Подменю
			Или ТекущиеДанные.Вид = МенеджерПроекта.Виды().ГруппаКнопок
			Или ТекущиеДанные.Вид = МенеджерПроекта.Виды().КонтекстноеМеню
			Тогда
			
			Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаКоманды_КоманднаяПанель;
			
		ИначеЕсли ТекущиеДанные.Вид = МенеджерПроекта.Виды().ГруппаКолонок Тогда
			Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаКоманды_Таблица;
			
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Тип = МенеджерПроекта.Типы().ТаблицаФормы Тогда
		Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаКоманды_Таблица;
		
	ИначеЕсли ТекущиеДанные.Тип = МенеджерПроекта.Типы().КнопкаФормы Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		Если Ложь
			Или Родитель.Вид = МенеджерПроекта.Виды().КоманднаяПанель
			Или Родитель.Вид = МенеджерПроекта.Виды().Подменю
			Или Родитель.Вид = МенеджерПроекта.Виды().ГруппаКнопок
			Или Родитель.Вид = МенеджерПроекта.Виды().КонтекстноеМеню
			Тогда
			
			Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаКоманды_КоманднаяПанель;
			
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Тип = МенеджерПроекта.Типы().ПолеФормы Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		Если Ложь
			Или Родитель.Тип = МенеджерПроекта.Типы().ТаблицаФормы
			Или Родитель.Вид = МенеджерПроекта.Виды().ГруппаКолонок
			Тогда
			
			Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаКоманды_Таблица;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВсеСтраницыКромеТекущей() 
	ТекущаяСтраница = Элементы.ГруппаКоманды.ТекущаяСтраница;
	
	Страницы = Элементы.ГруппаКоманды.ПодчиненныеЭлементы;
	Для Каждого Страница Из Страницы Цикл
		Страница.Видимость = Страница = ТекущаяСтраница;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСвойства()
	ТекущиеДанныеПрототип = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
	Если ТекущиеДанныеПрототип = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеСвойств = Элементы.СвойстваФормИЭлементовУправления.ТекущиеДанные;
	Если ТекущиеДанныеСвойств = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ложь
		Или ТекущиеДанныеСвойств.Свойство = "Заголовок"
		Или ТекущиеДанныеСвойств.Свойство = "КоличествоКолонок"
		Тогда
		
		ТекущиеДанныеСвойств.Значение = ТекущиеДанныеСвойств.ЗначениеПредставление;
		
	КонецЕсли;
	
	Если ТекущиеДанныеПрототип.Тип = МенеджерПроекта.Типы().ФормаКлиентскогоПриложения Тогда
		МенеджерПроекта.ИзменитьСвойство(ТекущиеДанныеПрототип.Имя, ТекущиеДанныеСвойств.Свойство, ТекущиеДанныеСвойств.Значение);
		
	Иначе
		Прототип = ПолучитьСтрокуПрототипаРекурсивно(ТекущиеДанныеПрототип);
		Если ТекущиеДанныеСвойств.Свойство = "ТипЗначения" Тогда
			ТекущиеДанныеПрототип.СписокВыбора = Новый СписокЗначений;
			
			МенеджерПроекта.ИзменитьТипЗначения(Прототип.Имя, ТекущиеДанныеСвойств.Свойство, ТекущиеДанныеСвойств.Значение, Ложь, ТекущиеДанныеПрототип.Имя, ТекущиеДанныеПрототип.Путь);
		
		ИначеЕсли ТекущиеДанныеСвойств.Свойство = "СоставДаты" Тогда
			МенеджерПроекта.ИзменитьТипЗначения(Прототип.Имя, "ТипЗначения", "Дата", Ложь, ТекущиеДанныеПрототип.Имя, ТекущиеДанныеПрототип.Путь, ТекущиеДанныеСвойств.Значение);
			
		Иначе
			МенеджерПроекта.ИзменитьСвойство(Прототип.Имя, ТекущиеДанныеСвойств.Свойство, ТекущиеДанныеСвойств.Значение, Ложь, ТекущиеДанныеПрототип.Имя);
			Если Истина
				И ТекущиеДанныеСвойств.Свойство = "КнопкаПоУмолчанию"
				И ТекущиеДанныеСвойств.Значение = "Да"
				Тогда
				
				Прототип.КнопкаПоУмолчанию = ТекущиеДанныеПрототип.Имя;
				ПодключитьОбработчикОжидания("ОтменитьПредыдущуюКнопкуПоУмолчанию", 0.1, Истина);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанныеПрототип[ТекущиеДанныеСвойств.Свойство] = ТекущиеДанныеСвойств.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПриИзменении(Элемент)
	ОбработатьИзменениеСвойства();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПредыдущуюКнопкуПоУмолчанию() Экспорт
	ТекущиеДанные = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Прототип = ПолучитьСтрокуПрототипаРекурсивно(ТекущиеДанные);
	ОтменитьПредыдущуюКнопкуПоУмолчаниюРекурсивно(Прототип.КнопкаПоУмолчанию, Прототип.ПолучитьЭлементы());

	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПредыдущуюКнопкуПоУмолчаниюРекурсивно(ИмяИскомойКнопки, Строки) 
	Для Каждого Строка Из Строки Цикл
		Если Истина
			И Строка.КнопкаПоУмолчанию = "Да" 
			И Строка.Имя <> ИмяИскомойКнопки
			Тогда
			
			Строка.КнопкаПоУмолчанию = Ложь;
			
		Иначе
			ОтменитьПредыдущуюКнопкуПоУмолчаниюРекурсивно(ИмяИскомойКнопки, Строка.ПолучитьЭлементы());

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСледующуюСтроку(ТекущиеДанные) 
	Результат = Неопределено;

	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		СтрокиУровня = ФормыИЭлементыУправления.ПолучитьЭлементы();
		
	Иначе
		СтрокиУровня = Родитель.ПолучитьЭлементы();
		
	КонецЕсли;
	
	ВзятьСледующий = Ложь;
	
	Для Каждого Строка Из СтрокиУровня Цикл
		Если ВзятьСледующий Тогда
			Результат = Строка;
			
			Прервать;
		ИначеЕсли Строка.Имя = ТекущиеДанные.Имя Тогда
			ВзятьСледующий = Не Строка.Перемещается;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;    
КонецФункции

//@skip-warning
&НаКлиенте
Функция ПолучитьПредыдущуюСтроку(ТекущиеДанные) 
	Результат = Неопределено;
	//
	//#Если _ Тогда
	//	ТекущиеДанные = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
	//#КонецЕсли
	//
	//Родитель = ТекущиеДанные.ПолучитьРодителя();
	//Если Родитель = Неопределено Тогда
	//	Возврат Результат;
	//КонецЕсли;
	//
	//СтрокиУровня = Родитель.ПолучитьЭлементы();
	//Для Каждого Строка Из СтрокиУровня Цикл
	//	Если ВзятьСледующий Тогда
	//		Результат = Строка.Заголовок;
	//		
	//		Прервать;
	//	Если Строка.Имя = ТекущиеДанные.Имя Тогда
	//		ВзятьСледующий = Истина;
	//		
	//	КонецЕсли;
	//КонецЦикла;
	//
	Возврат Результат;    
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуВставкой(ТекущиеДанные) 
	Результат = Неопределено;
	
	СтрокиУровня = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
	Для Каждого Строка Из СтрокиУровня Цикл
		Если Строка.Имя = ТекущиеДанные.Имя Тогда
			ИндексВставки = СтрокиУровня.Индекс(Строка) + 1;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = СтрокиУровня.Вставить(ИндексВставки);
	
	Возврат Результат;
КонецФункции


&НаКлиенте
Процедура ДобавитьЭлементУправления(Тип, Вид = "", ТипЗначения = "", ЭтоКолонка = Ложь)
	ТекущиеДанные = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли Ложь
		Или ТекущиеДанные.Тип = МенеджерПроекта.Типы().ФормаКлиентскогоПриложения
		Или ТекущиеДанные.Тип = МенеджерПроекта.Типы().ГруппаФормы
		Или ТекущиеДанные.Тип = МенеджерПроекта.Типы().ТаблицаФормы
		Тогда
		
		НоваяСтрока = ТекущиеДанные.ПолучитьЭлементы().Добавить();
		Родитель = ТекущиеДанные;
		
	Иначе
		НоваяСтрока = ДобавитьСтрокуВставкой(ТекущиеДанные);
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
	КонецЕсли;
	
	НоваяСтрока.Тип = Тип;
	НоваяСтрока.Вид = Вид;
	НоваяСтрока.ЭтоКолонка = ЭтоКолонка;
	
	Если Родитель.Тип <> МенеджерПроекта.Типы().ФормаКлиентскогоПриложения Тогда
		НоваяСтрока.Родитель = Родитель.Имя;
		
	КонецЕсли;
	
	НоваяСтрока.Прототип = ПолучитьСтрокуПрототипаРекурсивно(Родитель).Имя;
	
	Если Тип = МенеджерПроекта.Типы().ГруппаФормы Тогда
		Связать = Ложь;
		Ключи = "Имя,Тип,Вид,Родитель,Прототип";
		
		Если Вид = МенеджерПроекта.Виды().ОбычнаяГруппа Тогда
			НоваяСтрока.ИндексКартинки = 2;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Группа");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "Группировка,ОтображатьЗаголовок,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе,ГоризонтальноеПоложениеПодчиненных,ВертикальноеПоложениеПодчиненных");
			
		ИначеЕсли Вид = МенеджерПроекта.Виды().КоманднаяПанель Тогда
			НоваяСтрока.ИндексКартинки = 1;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "КоманднаяПанель");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().Страницы Тогда
			НоваяСтрока.ИндексКартинки = 19;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Страницы");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе,ВертикальноеПоложениеПодчиненных,ГоризонтальноеПоложениеПодчиненных");

		ИначеЕсли Вид = МенеджерПроекта.Виды().Страница Тогда
			НоваяСтрока.ИндексКартинки = 18;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Страница");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "Группировка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе,ВертикальноеПоложениеПодчиненных,ГоризонтальноеПоложениеПодчиненных");

		ИначеЕсли Вид = МенеджерПроекта.Виды().Подменю Тогда
			НоваяСтрока.ИндексКартинки = 16;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Подменю");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().ГруппаКнопок Тогда
			НоваяСтрока.ИндексКартинки = 9;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "ГруппаКнопок");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "Отображение,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");
			
		ИначеЕсли Вид = МенеджерПроекта.Виды().ГруппаКолонок Тогда
			НоваяСтрока.ИндексКартинки = 10;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "ГруппаКолонок");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "Группировка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().КонтекстноеМеню Тогда
			НоваяСтрока.ИндексКартинки = 27;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "КонтекстноеМеню");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		КонецЕсли;
	ИначеЕсли Тип = МенеджерПроекта.Типы().ПолеФормы Тогда
		Связать = Истина;
		Ключи = "Имя,Тип,Вид,Родитель,Прототип,Путь,ПутьКДанным";
		
		Если Вид = МенеджерПроекта.Виды().ПолеВвода Тогда
			Если НоваяСтрока.ЭтоКолонка Тогда
				НоваяСтрока.ИндексКартинки = 14;
				
				НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Колонка");
				НоваяСтрока.Имя = НовоеИмя;
				НоваяСтрока.ИмяТаблицы = ПолучитьИмяТаблицыРекурсивно(НоваяСтрока);
				НоваяСтрока.ПутьКДанным = НоваяСтрока.ИмяТаблицы + "." + НовоеИмя;
				НоваяСтрока.Заголовок = НовоеИмя;
				НоваяСтрока.Путь = НоваяСтрока.ИмяТаблицы;
				ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ТипЗначения,СоставДаты,ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

			Иначе
				НоваяСтрока.ИндексКартинки = 3;
				
				НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Поле");
				НоваяСтрока.Имя = НовоеИмя;
				НоваяСтрока.ПутьКДанным = НовоеИмя;
				НоваяСтрока.Заголовок = НовоеИмя;
				НоваяСтрока.Путь = "";
				ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ТипЗначения,СоставДаты,ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

			КонецЕсли;
		ИначеЕсли Вид = МенеджерПроекта.Виды().ПолеФорматированногоДокумента Тогда
			Ключи = Ключи + ",ТипЗначения";
			
			НоваяСтрока.ИндексКартинки = 23;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "ФорматированныйДокумент");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.ПутьКДанным = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.Путь = "";
			НоваяСтрока.ТипЗначения = "ФорматированныйДокумент";
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().ПолеНадписи Тогда
			// Только для форматированной строки, остальное - Надпись
			
			Ключи = Ключи + ",ТипЗначения";
			
			НоваяСтрока.ИндексКартинки = 26;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "ФорматированнаяСтрока");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.ПутьКДанным = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.Путь = "";
			НоваяСтрока.ТипЗначения = "ФорматированнаяСтрока";
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().ПолеТекстовогоДокумента Тогда
			Ключи = Ключи + ",ТипЗначения";
			
			НоваяСтрока.ИндексКартинки = 24;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "ТекстовыйДокумент");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.ПутьКДанным = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.Путь = "";
			НоваяСтрока.ТипЗначения = "ТекстовыйДокумент";
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().ПолеТабличногоДокумента Тогда
			Ключи = Ключи + ",ТипЗначения";
			
			НоваяСтрока.ИндексКартинки = 25;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "ТабличныйДокумент");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.ПутьКДанным = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.Путь = "";
			НоваяСтрока.ТипЗначения = "ТабличныйДокумент";
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().ПолеФлажка Тогда
			Ключи = Ключи + ",ТипЗначения";
			
			НоваяСтрока.ИндексКартинки = 20;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Флажок");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.ПутьКДанным = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.ТипЗначения = "Булево";
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().ПолеПереключателя Тогда
			Ключи = Ключи + ",ТипЗначения";
			
			НоваяСтрока.ИндексКартинки = 15;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Переключатель");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.ПутьКДанным = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.ТипЗначения = "Строка";
			НоваяСтрока.СписокВыбора = Новый СписокЗначений;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,ВидПереключателя,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().ПолеИндикатора Тогда
			Ключи = Ключи + ",ТипЗначения";
			
			НоваяСтрока.ИндексКартинки = 11;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Индикатор");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.ПутьКДанным = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.ТипЗначения = "Число";
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().ПолеПолосыРегулирования Тогда
			Ключи = Ключи + ",ТипЗначения";
			
			НоваяСтрока.ИндексКартинки = 17;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "ПолосаРегулирования");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.ПутьКДанным = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.ТипЗначения = "Число";
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().ПолеКалендаря Тогда
			Ключи = Ключи + ",ТипЗначения";
			
			НоваяСтрока.ИндексКартинки = 12;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Календарь");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.ТипЗначения = "Дата";
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().ПолеКартинки Тогда
			Ключи = Ключи + ",ТипЗначения,ТекстНевыбраннойКартинки";
			
			НоваяСтрока.ИндексКартинки = 13;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Картинка");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.ПутьКДанным = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.ТипЗначения = "Строка";
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,Гиперссылка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		КонецЕсли;
	ИначеЕсли Тип = МенеджерПроекта.Типы().КнопкаФормы Тогда
		Связать = Истина;
		Ключи = "Имя,Тип,Вид,Родитель,Прототип";
		
		Если Вид = МенеджерПроекта.Виды().ОбычнаяКнопка Тогда
			НоваяСтрока.ИндексКартинки = 4;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Кнопка");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "КнопкаПоУмолчанию,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().КнопкаКоманднойПанели Тогда
			НоваяСтрока.ИндексКартинки = 4;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Кнопка");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "КнопкаПоУмолчанию,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().Гиперссылка Тогда
			НоваяСтрока.ИндексКартинки = 21;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Гиперссылка");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "КнопкаПоУмолчанию,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().ГиперссылкаКоманднойПанели Тогда
			НоваяСтрока.ИндексКартинки = 21;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Гиперссылка");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "КнопкаПоУмолчанию,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		КонецЕсли;
	ИначеЕсли Тип = МенеджерПроекта.Типы().ТаблицаФормы Тогда
		Связать = Истина;
		Ключи = "Имя,Тип,Вид,Родитель,Прототип,ТипЗначения";
		
		Если ТипЗначения = МенеджерПроекта.ТипыЗначения().ТаблицаЗначений Тогда
			НоваяСтрока.ИндексКартинки = 7;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Таблица");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.ТипЗначения = ТипЗначения;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");
			
		ИначеЕсли ТипЗначения = МенеджерПроекта.ТипыЗначения().ДеревоЗначений Тогда
			НоваяСтрока.ИндексКартинки = 8;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Дерево");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			НоваяСтрока.ТипЗначения = ТипЗначения;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ПоложениеЗаголовка,ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		КонецЕсли;
	ИначеЕсли Тип = МенеджерПроекта.Типы().ДекорацияФормы Тогда
		Связать = Ложь;
		Ключи = "Имя,Тип,Вид,Родитель,Прототип";
		
		Если Вид = МенеджерПроекта.Виды().Надпись Тогда
			НоваяСтрока.ИндексКартинки = 5;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Надпись");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		ИначеЕсли Вид = МенеджерПроекта.Виды().Картинка Тогда
			НоваяСтрока.ИндексКартинки = 13;
			
			НовоеИмя = МенеджерПроекта.ПолучитьНовоеИмяЭлемента(НоваяСтрока.Прототип, "Картинка");
			НоваяСтрока.Имя = НовоеИмя;
			НоваяСтрока.Заголовок = НовоеИмя;
			ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, "ВертикальноеПоложениеВГруппе,ГоризонтальноеПоложениеВГруппе");

		КонецЕсли;
	КонецЕсли;
	
	ДополнитьКлючиСвойств(Ключи, НоваяСтрока);
	СвойстваЭлементаУправления = Новый Структура(Ключи);
	ЗаполнитьЗначенияСвойств(СвойстваЭлементаУправления, НоваяСтрока);
	
	Попытка
		МенеджерПроекта.ДобавитьЭлементУправления(СвойстваЭлементаУправления, Связать, Ложь);
		
	Исключение
		//
		
	КонецПопытки;
	
	Элементы.ФормыИЭлементыУправления.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТаблицыРекурсивно(ТекущаяСтрока)
	Результат = "";

	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель.Тип = МенеджерПроекта.Типы().ТаблицаФормы Тогда
		Результат = Родитель.Имя;
		
	Иначе
		Результат = ПолучитьИмяТаблицыРекурсивно(Родитель);

	КонецЕсли;

	Возврат Результат;
КонецФункции


&НаКлиенте
Процедура ВидимостьПодсказокКоманд(Команда)
	ОпределитьВидимостьПодсказокКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьВидимостьПодсказокКоманд(ЭтоИзменение = Истина) 
	Если ЭтоИзменение Тогда
		ПоказыватьПодсказкиКоманд = Не ПоказыватьПодсказкиКоманд;
		
	КонецЕсли;
	
	Если ПоказыватьПодсказкиКоманд Тогда
		ВариантОтображенияПодсказки = ОтображениеПодсказки.ОтображатьСправа;
		
	Иначе
		ВариантОтображенияПодсказки = ОтображениеПодсказки.Всплывающая;
		
	КонецЕсли;
	
	Страницы = Элементы.ГруппаКоманды.ПодчиненныеЭлементы;
	Для Каждого Страница Из Страницы Цикл
		ЭлементыСтраницы = Страница.ПодчиненныеЭлементы;
		Для Каждого ЭлементСтраницы Из ЭлементыСтраницы Цикл
			Если Истина
				И ТипЗнч(ЭлементСтраницы) = Тип("КнопкаФормы")
				И ЭлементСтраницы.ИмяКоманды <> "ВидимостьПодсказокКоманд"
				Тогда
				
				ЭлементСтраницы.ОтображениеПодсказки = ВариантОтображенияПодсказки;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	ТекущиеДанные = Элементы.СвойстваФормИЭлементовУправления.ТекущиеДанные;
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Значение = ВыбранныеФайлы[0];
	ТекущиеДанные.ЗначениеПредставление = ВыбранныеФайлы[0];
	
	ЗначениеПриИзменении(Неопределено);
	ОпределитьСвойства(Элементы.ФормыИЭлементыУправления.ТекущиеДанные); //todo

	Элементы.СвойстваФормИЭлементовУправления.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваФормИЭлементовУправленияПриАктивизацииЯчейкиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	ТекущиеДанные = Элементы.СвойстваФормИЭлементовУправления.ТекущиеДанные;
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ТекущиеДанные.Значение = ВыбранныйЭлемент.Значение;
		ТекущиеДанные.ЗначениеПредставление = ВыбранныйЭлемент.Представление;
		
		ЗначениеПриИзменении(Неопределено);
		ОпределитьСвойства(Элементы.ФормыИЭлементыУправления.ТекущиеДанные); //todo
		
	КонецЕсли;
	
	Элементы.СвойстваФормИЭлементовУправления.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСвойстваВФайл(Команда)
	Результат = СохранитьСвойстваВФайлНаСервере();
	МенеджерФайлов.СохранитьФайл(Результат.ПутьКФайлу, Результат.Адрес, Ложь);

КонецПроцедуры

&НаСервере
Функция СохранитьСвойстваВФайлНаСервере()
	Результат = Новый Структура("Адрес,ПутьКФайлу", "", "");
	Результат.ПутьКФайлу = СтрЗаменить(РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла, "Эскиз.epf", "out\Свойства.json");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	СвойстваНаСервере = РеквизитФормыВЗначение("СвойстваФормИЭлементовУправления");
	Json = СериализоватьВJSON(ТаблицаСвойствВМассивСтруктур(СвойстваНаСервере, Истина));
	
	Писатель = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Писатель.Записать(Json);
	Писатель.Закрыть();
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		Результат.Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ТаблицаСвойствВМассивСтруктур(Знач ТаблицаЗначений, ВсеКолонки, ИменаКолонок = "")
	Результат = Новый Массив;
	
	Если ВсеКолонки Тогда
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			ИменаКолонок = ИменаКолонок + "," + Колонка.Имя;
		КонецЦикла;
		
		ИменаКолонок = Сред(ИменаКолонок, 2);
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СтруктураСтроки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		Результат.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура МассивСтруктурВТаблицуСвойств(ТаблицаЗначений, Свойства, ВсеКолонки, ИменаКолонок = "")
	ТаблицаЗначений.Очистить();
	
	Если ВсеКолонки Тогда
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			ИменаКолонок = ИменаКолонок + "," + Колонка.Имя;
		КонецЦикла;
		
		ИменаКолонок = Сред(ИменаКолонок, 2);
	КонецЕсли;
	
	ИменаДанныхВыбора = Новый Массив;
	ИменаДанныхВыбора.Добавить("ДанныеВыбора");
	ИменаДанныхВыбора.Добавить("ДанныеВыбора_ГруппаКолонок");
	//---
	ИменаДанныхВыбора.Добавить("ДанныеВыбора_Родитель_Подменю");
	ИменаДанныхВыбора.Добавить("ДанныеВыбора_Родитель_Страницы");
	ИменаДанныхВыбора.Добавить("ДанныеВыбора_Родитель_КоманднаяПанель");
	
	Для Каждого Свойство Из Свойства Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Свойство);
		
		Для Каждого ИмяДанныхВыбора Из ИменаДанныхВыбора Цикл
			Для Каждого Строка Из Свойство[ИмяДанныхВыбора] Цикл
				НоваяСтрока[ИмяДанныхВыбора].Добавить(Строка.Ключ, Строка.Значение);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СериализоватьВJSON(Значение) Экспорт
	Писатель = Новый ЗаписьJSON;
	Писатель.ПроверятьСтруктуру = Истина;
	
	ПараметрыПисателя = Новый ПараметрыЗаписиJSON(, Символы.Таб,, ЭкранированиеСимволовJSON.СимволыВнеBMP);
	Писатель.УстановитьСтроку(ПараметрыПисателя);
	
	НастройкаСериализации = Новый НастройкиСериализацииJSON;
	НастройкаСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкаСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(Писатель, Значение, НастройкаСериализации, "Преобразователь", ЭтотОбъект);
	
	Результат = Писатель.Закрыть();
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция Преобразователь(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	Результат = Новый Структура;
	Для Каждого Элемент Из Значение Цикл
		Результат.Вставить(Элемент.Значение, Элемент.Представление);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДесериализоватьИзJSON(JSON, ИзФайла = Ложь) Экспорт
	Результат = Неопределено;
	
	Читатель = Новый ЧтениеJSON;
	
	Если ИзФайла Тогда
		Читатель.ОткрытьФайл(JSON);
		
	Иначе
		Читатель.УстановитьСтроку(JSON);
		
	КонецЕсли;
	
	ИменаСвойствСоЗначениемТипаДата = Новый Массив;
	//ИменаСвойствСоЗначениемТипаДата.Добавить("");
	
	Результат = ПрочитатьJSON(Читатель,, ИменаСвойствСоЗначениемТипаДата, ФорматДатыJSON.ISO);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСвойстваИзФайла(Команда)
	ВыполнитьЗагрузкуСвойствИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСвойствИзМакета() 
	ВыполнитьЗагрузкуСвойствИзМакетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуСвойствИзМакетаНаСервере() 
	СвойстваФормИЭлементовУправленияНаСервере = РеквизитФормыВЗначение("СвойстваФормИЭлементовУправления");
	
	Json = ПолучитьJsonИзМакета("Свойства");
	Свойства = ДесериализоватьИзJSON(Json);
	МассивСтруктурВТаблицуСвойств(СвойстваФормИЭлементовУправленияНаСервере, Свойства, Истина);
	
	ЗначениеВРеквизитФормы(СвойстваФормИЭлементовУправленияНаСервере, "СвойстваФормИЭлементовУправления");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСвойствИзФайла() 
	РасположениеФайлаСвойств = ПолучитьРасположениеФайлаСвойств();
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗагрузитьСвойстваИзФайлаЗавершение", ЭтотОбъект);
	
	Попытка
		МенеджерФайлов.ЗагрузитьФайл(РасположениеФайлаСвойств, Ложь, ОписаниеОповещенияОЗавершении);	
			
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Файл свойств не найден. Свойства будут загружены из макета.";
		
		ВыполнитьЗагрузкуСвойствИзМакетаНаСервере();
				
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПолучитьJsonИзМакета(ИмяМакета) 
	Результат = РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета).ПолучитьТекст();	
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСвойстваИзФайлаЗавершение(Адрес, ДополнительныеПараметры) Экспорт
	Если Не ПустаяСтрока(Адрес) Тогда
		ЗагрузитьСвойстваИзФайлаЗавершениеНаСервере(Адрес);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСвойстваИзФайлаЗавершениеНаСервере(Адрес) 
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	СвойстваФормИЭлементовУправленияНаСервере = РеквизитФормыВЗначение("СвойстваФормИЭлементовУправления");
	
	Свойства = ДесериализоватьИзJSON(ИмяВременногоФайла, Истина);
	МассивСтруктурВТаблицуСвойств(СвойстваФормИЭлементовУправленияНаСервере, Свойства, Истина);
	
	ЗначениеВРеквизитФормы(СвойстваФормИЭлементовУправленияНаСервере, "СвойстваФормИЭлементовУправления");
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьРасположениеФайлаСвойств()
	Результат = СтрЗаменить(РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла, "Эскиз.epf", "out\Свойства.json");
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СвойстваФормИЭлементовУправленияДанныеВыбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	РедактированиеДанныхВыбора("ДанныеВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеДанныхВыбора(ИмяКолонкиДанынхВыбора) 
	ТекущиеДанные = Элементы.СвойстваФормИЭлементовУправления.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеВыбора", ТекущиеДанные[ИмяКолонкиДанынхВыбора]);
	
	ДополнительнаеПараметрыФормы = Новый Структура;
	ДополнительнаеПараметрыФормы.Вставить("ИмяКолонкиДанынхВыбора", ИмяКолонкиДанынхВыбора);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("РедактированиеДанныхВыбораЗавершение", ЭтотОбъект, ДополнительнаеПараметрыФормы);
	ОткрытьФорму("ВнешняяОбработка.Эскиз.Форма.ДанныеВыбораСвойства", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеДанныхВыбораЗавершение(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	Если ДанныеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СвойстваФормИЭлементовУправления.ТекущиеДанные;
	ТекущиеДанные[ДополнительныеПараметры.ИмяКолонкиДанынхВыбора].Очистить();
	
	Для Каждого Строка Из ДанныеВыбора Цикл
		ТекущиеДанные[ДополнительныеПараметры.ИмяКолонкиДанынхВыбора].Добавить(Строка.Значение, Строка.Представление);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФормыИЭлементыУправленияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Для Каждого СтрокаИсточник Из ПараметрыПеретаскивания.Значение Цикл
		Родитель = СтрокаИсточник.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			СтрокиУровня = ФормыИЭлементыУправления.ПолучитьЭлементы();
			
		Иначе
			СтрокиУровня = Родитель.ПолучитьЭлементы();
			
		КонецЕсли;
		
		СтрокиУровня.Удалить(СтрокаИсточник);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФормыИЭлементыУправленияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	Если ПеремещениеВозможно() Тогда
		Перемещенные = Новый Массив;
		ВыполнитьПеремещение(ПараметрыПеретаскивания.Значение, Строка, Перемещенные, Истина);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПеремещениеВозможно() 
	Результат = Истина;
	
	//todo	
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПеремещение(ПеремещаемыеЭлементы, ИдентификаторСтрокиПриемника, Перемещенные, Знач ПерваяИтерация = Ложь)
	СтрокаПриемник = ФормыИЭлементыУправления.НайтиПоИдентификатору(ИдентификаторСтрокиПриемника);
	ЭтоГруппа = Ложь
	Или СтрокаПриемник.Тип = МенеджерПроекта.Типы().ФормаКлиентскогоПриложения
	Или СтрокаПриемник.Тип = МенеджерПроекта.Типы().ГруппаФормы
	Или СтрокаПриемник.Тип = МенеджерПроекта.Типы().ТаблицаФормы;
	
	Родитель = СтрокаПриемник.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		СтрокиУровня = ФормыИЭлементыУправления.ПолучитьЭлементы();
		
	Иначе
		СтрокиУровня = Родитель.ПолучитьЭлементы();
		
	КонецЕсли;
	
	РасположениеСтрокиПриемника = СтрокиУровня.Индекс(СтрокаПриемник) + 1;
	ЭтоПоследнийЭлементУровня = СтрокиУровня.Количество() = РасположениеСтрокиПриемника;
	
	Для Каждого СтрокаИсточник Из ПеремещаемыеЭлементы Цикл
		Если ТипЗнч(СтрокаИсточник) = Тип("Число") Тогда
			СтрокаИсточник = ФормыИЭлементыУправления.НайтиПоИдентификатору(СтрокаИсточник);	
			
		КонецЕсли;
		
		Если ПерваяИтерация И ИерархияНеКорректна(СтрокаПриемник, СтрокаИсточник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Перемещенные.Найти(СтрокаИсточник.Имя) = Неопределено Тогда
			НовыйЭлемент = Неопределено;
			Если ЭтоГруппа Тогда
				НовыйЭлемент = СтрокаПриемник.ПолучитьЭлементы().Добавить();
				
			ИначеЕсли ЭтоПоследнийЭлементУровня Тогда
				НовыйЭлемент = СтрокиУровня.Добавить();
				
			Иначе
				НовыйЭлемент = СтрокиУровня.Вставить(РасположениеСтрокиПриемника);
				
			КонецЕсли;
			
			Если НовыйЭлемент <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаИсточник);	
				СтрокаИсточник.Перемещается = Истина;
				
				ПрототипИсточник = ПолучитьСтрокуПрототипаРекурсивно(СтрокаИсточник).Имя;
				
				НовыйЭлемент.Прототип = ПолучитьСтрокуПрототипаРекурсивно(НовыйЭлемент).Имя;
				
				Родитель = НовыйЭлемент.ПолучитьРодителя();
				Если Родитель.Тип = МенеджерПроекта.Типы().ФормаКлиентскогоПриложения Тогда
					НовыйЭлемент.Родитель = "";
					
				Иначе
					НовыйЭлемент.Родитель = Родитель.Имя;
					
				КонецЕсли;
				
				Если ПрототипИсточник = НовыйЭлемент.Прототип И ПерваяИтерация Тогда
					ДанныеПеремещения = Новый Структура;
					ДанныеПеремещения.Вставить("ИмяПрототипа", НовыйЭлемент.Прототип);
					
					СледующаяСтрока = ПолучитьСледующуюСтроку(НовыйЭлемент);
					Если СледующаяСтрока = Неопределено Тогда
						ИмяЭлементаМесторасположения = "";
						
					Иначе
						ИмяЭлементаМесторасположения = СледующаяСтрока.Имя;
						
					КонецЕсли;
					
					ДанныеПеремещения.Вставить("ИмяЭлементаМесторасположения", ИмяЭлементаМесторасположения);
					ДанныеПеремещения.Вставить("ИмяРодительскогоЭлемента", НовыйЭлемент.Родитель);
					ДанныеПеремещения.Вставить("ИмяПеремещаемогоЭлемента", НовыйЭлемент.Имя);
					
					МенеджерПроекта.ПереместитьЭлементУправления(ДанныеПеремещения);
					
				Иначе
					//todo
					
				КонецЕсли;
				
				ДочерниеЭлементы = СтрокаИсточник.ПолучитьЭлементы();
				Если ДочерниеЭлементы.Количество() Тогда
					ВыполнитьПеремещение(ДочерниеЭлементы, НовыйЭлемент.ПолучитьИдентификатор(), Перемещенные);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ИерархияНеКорректна(СтрокаПриемник, СтрокаИсточник)
	Результат = Ложь;
	
	Если СтрокаПриемник.Тип = МенеджерПроекта.Типы().ГруппаФормы И СтрокаПриемник.Вид = МенеджерПроекта.Виды().Страницы Тогда
		Если СтрокаИсточник.Тип = МенеджерПроекта.Типы().ГруппаФормы И СтрокаИсточник.Вид = МенеджерПроекта.Виды().Страница Тогда
			Результат = Ложь;
			
		Иначе 
			Результат = Истина;
			
		КонецЕсли;
	ИначеЕсли СтрокаПриемник.Тип = МенеджерПроекта.Типы().ГруппаФормы И СтрокаПриемник.Вид = МенеджерПроекта.Виды().КоманднаяПанель Тогда
		Если СтрокаИсточник.Тип = МенеджерПроекта.Типы().ГруппаФормы И СтрокаИсточник.Вид = МенеджерПроекта.Виды().Подменю Тогда
			Результат = Ложь;
			
		ИначеЕсли СтрокаИсточник.Тип = МенеджерПроекта.Типы().ГруппаФормы И СтрокаИсточник.Вид = МенеджерПроекта.Виды().ГруппаКнопок Тогда
			Результат = Ложь;
			
		ИначеЕсли СтрокаИсточник.Тип = МенеджерПроекта.Типы().КнопкаФормы И СтрокаИсточник.Вид = МенеджерПроекта.Виды().КнопкаКоманднойПанели Тогда
			Результат = Ложь;
			
		ИначеЕсли СтрокаИсточник.Тип = МенеджерПроекта.Типы().КнопкаФормы И СтрокаИсточник.Вид = МенеджерПроекта.Виды().ГиперссылкаКоманднойПанели Тогда
			Результат = Ложь;
			
		Иначе 
			Результат = Истина;
			
		КонецЕсли;
	ИначеЕсли СтрокаПриемник.Тип = МенеджерПроекта.Типы().ТаблицаФормы Тогда
		Если СтрокаИсточник.Тип = МенеджерПроекта.Типы().ПолеФормы И СтрокаИсточник.Вид = МенеджерПроекта.Виды().ПолеВвода Тогда
			Результат = Ложь;
			
		ИначеЕсли СтрокаИсточник.Тип = МенеджерПроекта.Типы().ГруппаФормы И СтрокаИсточник.Вид = МенеджерПроекта.Виды().ГруппаКолонок Тогда
			Результат = Ложь;
			
		ИначеЕсли СтрокаИсточник.Тип = МенеджерПроекта.Типы().ГруппаФормы И СтрокаИсточник.Вид = МенеджерПроекта.Виды().КонтекстноеМеню Тогда
			Результат = Ложь;
			
		Иначе 
			Результат = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	ТекущиеДанные = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиУровня = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
	ИндексТекущейСтроки = СтрокиУровня.Индекс(ТекущиеДанные);
	ИндексПредыдущейСтроки = ИндексТекущейСтроки - 1;
	
	Если ИндексТекущейСтроки > 0 Тогда
		ДанныеПеремещения = Новый Структура;
		ДанныеПеремещения.Вставить("ИмяПрототипа", ТекущиеДанные.Прототип);
		ДанныеПеремещения.Вставить("ИмяПеремещаемогоЭлемента", ТекущиеДанные.Имя);
		ДанныеПеремещения.Вставить("ИмяРодительскогоЭлемента", ТекущиеДанные.Родитель);
		
		ПредыдущиеДанные = СтрокиУровня[ИндексПредыдущейСтроки];
		ДанныеПеремещения.Вставить("ИмяЭлементаМесторасположения", ПредыдущиеДанные.Имя);
		
		МенеджерПроекта.ПереместитьЭлементУправления(ДанныеПеремещения);
		
		СтрокиУровня.Сдвинуть(ИндексТекущейСтроки, -1);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	ТекущиеДанные = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиУровня = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
	ИндексТекущейСтроки = СтрокиУровня.Индекс(ТекущиеДанные);
	ИндексСледующейСтроки = ИндексТекущейСтроки + 1;
	ВсегоСтрокУровня = СтрокиУровня.Количество() - 1;
	
	Если ИндексТекущейСтроки < ВсегоСтрокУровня Тогда
		ДанныеПеремещения = Новый Структура;
		ДанныеПеремещения.Вставить("ИмяПрототипа", ТекущиеДанные.Прототип);
		ДанныеПеремещения.Вставить("ИмяЭлементаМесторасположения", ТекущиеДанные.Имя);
		ДанныеПеремещения.Вставить("ИмяРодительскогоЭлемента", ТекущиеДанные.Родитель);
		
		СледующиеДанные = СтрокиУровня[ИндексСледующейСтроки];
		ДанныеПеремещения.Вставить("ИмяПеремещаемогоЭлемента", СледующиеДанные.Имя);
		
		МенеджерПроекта.ПереместитьЭлементУправления(ДанныеПеремещения);
		
		СтрокиУровня.Сдвинуть(ИндексТекущейСтроки, 1);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбораЗавершение(СписокВыбора, ДополнительныеПараметры) Экспорт
	ТекущиеДанные = Элементы.СвойстваФормИЭлементовУправления.ТекущиеДанные;
	Если ТипЗнч(ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
		ТекущиеДанные.Значение.Очистить();
		Если СписокВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Значение.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
		ТекущиеДанные.ЗначениеПредставление = Строка(ТекущиеДанные.Значение);
		
		ОбработатьИзменениеСвойства();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФормыИЭлементыУправленияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	ВыполнитьУдалениеФормыИлиЭлементаУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФормуЭлементУправления(Команда)
	ВыполнитьУдалениеФормыИлиЭлементаУправления();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУдалениеФормыИлиЭлементаУправления() 
	ТекущиеДанные = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Тип = МенеджерПроекта.Типы().ФормаКлиентскогоПриложения Тогда
		МенеджерПроекта.УдалитьФорму(ТекущиеДанные.Имя);
		ФормыИЭлементыУправления.ПолучитьЭлементы().Удалить(ТекущиеДанные);

	Иначе
		СтрокаПрототип = ПолучитьСтрокуПрототипаРекурсивно(ТекущиеДанные);
		Если ТекущиеДанные.Тип = МенеджерПроекта.Типы().КнопкаФормы Тогда
			МенеджерПроекта.УдалитьЭлементУправления(СтрокаПрототип.Имя, ТекущиеДанные.Имя, ТекущиеДанные.Имя, Истина);

		ИначеЕсли ТекущиеДанные.Тип = МенеджерПроекта.Типы().ПолеФормы Тогда
			МенеджерПроекта.УдалитьЭлементУправления(СтрокаПрототип.Имя, ТекущиеДанные.Имя, ТекущиеДанные.Имя, Истина, ТекущиеДанные.ЭтоКолонка, ТекущиеДанные.ИмяТаблицы);

		ИначеЕсли Ложь
			Или ТекущиеДанные.Тип = МенеджерПроекта.Типы().ГруппаФормы
			Или ТекущиеДанные.Тип = МенеджерПроекта.Типы().ДекорацияФормы
			Тогда
			
			МенеджерПроекта.УдалитьЭлементУправления(СтрокаПрототип.Имя, ТекущиеДанные.Имя, "", Ложь);
			
		Иначе
			МенеджерПроекта.УдалитьЭлементУправления(СтрокаПрототип.Имя, ТекущиеДанные.Имя, ТекущиеДанные.Имя, Ложь);
			
		КонецЕсли;
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		Родитель.ПолучитьЭлементы().Удалить(ТекущиеДанные);

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвойстваФормИЭлементовУправленияДанныеВыбора_ГруппаКолонокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	РедактированиеДанныхВыбора("ДанныеВыбора_ГруппаКолонок");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвойстваЗначениямиПоУмолчанию(НоваяСтрока, ИменаСвойств)
	ЗаполняемыеСвойства = Новый Структура(ИменаСвойств);
	Для Каждого Пара Из ЗаполняемыеСвойства Цикл
		ТекущееИмя = Пара.Ключ;
		
		ПараметрыОтбора = Новый Структура("Свойство", ТекущееИмя);
		ИскомыеСтроки = СвойстваФормИЭлементовУправления.НайтиСтроки(ПараметрыОтбора);
				
		Если НоваяСтрока.Тип = "ГруппаКолонок" Тогда	
			НоваяСтрока[ТекущееИмя] = ИскомыеСтроки[0].ДанныеВыбора_ГруппаКолонок[0].Значение;
			
		Иначе
			НоваяСтрока[ТекущееИмя] = ИскомыеСтроки[0].ДанныеВыбора[0].Значение;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	//ТекущиеДанныеПрототип = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
	ТекущиеДанныеСвойства = Элементы.СвойстваФормИЭлементовУправления.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанныеСвойства.Значение) = Тип("СписокЗначений") Тогда
		// нужно дать ввести несколько значений в список (список выбора переключателя и т.д.)
		
	Иначе
		Если Ложь
			Или ТекущиеДанныеСвойства.ДанныеВыбора.Количество()
			Или ТекущиеДанныеСвойства.ДанныеВыбора_ГруппаКолонок.Количество()
			Тогда
				
			// нужно дать выбрать значение из выпадающего списка (вид переключателя, горизонтальное положение и т.д.)

			Иначе
				// нужно дать ввести значение (заголовок, количество колонок и т.д.)
				ОписаниеОповещения = Новый ОписаниеОповещения("ВводЗавершение", ЭтотОбъект);
				Если ТипЗнч(ТекущиеДанныеСвойства.Значение) = Тип("Строка") Тогда
					ПоказатьВводСтроки(ОписаниеОповещения, ТекущиеДанныеСвойства.Значение, ТекущиеДанныеСвойства.СвойствоПредставление,, Истина);
					
				ИначеЕсли ТипЗнч(ТекущиеДанныеСвойства.Значение) = Тип("Число") Тогда
					ПоказатьВводЧисла(ОписаниеОповещения, ТекущиеДанныеСвойства.Значение, ТекущиеДанныеСвойства.СвойствоПредставление);
	
				КонецЕсли;
					
		КонецЕсли;
	КонецЕсли;
	
//	Если РежимРедактированияСвойств Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТекущиеДанныеПрототип = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
//	ТекущиеДанныеСвойства = Элементы.СвойстваФормИЭлементовУправления.ТекущиеДанные;
//	
//	Если Элемент.ТекущийЭлемент.Имя = "Свойство" Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТекущиеДанныеПрототип.Вид = МенеджерПроекта.Виды().ГруппаКолонок Тогда
//		ОписаниеОповещения = Новый ОписаниеОповещения("СвойстваФормИЭлементовУправленияПриАктивизацииЯчейкиЗавершение", ЭтотОбъект);
//		ПоказатьВыборИзСписка(ОписаниеОповещения, ТекущиеДанныеСвойства.ДанныеВыбора_ГруппаКолонок, Элементы.СвойстваФормИЭлементовУправления.ТекущийЭлемент);
//		
//	Иначе
//		Если ТекущиеДанныеСвойства.Свойство = "Картинка" Тогда
//			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
//			ДиалогВыбораФайла.МножественныйВыбор = Ложь;
//			
//			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКартинкиЗавершение", ЭтотОбъект);
//			ДиалогВыбораФайла.Показать(ОписаниеОповещения);
//			
//		ИначеЕсли ТекущиеДанныеСвойства.ДанныеВыбора.Количество() Тогда
//			Если ТекущиеДанныеСвойства = Неопределено Тогда
//				Возврат;
//			КонецЕсли;
//			
//			ОписаниеОповещения = Новый ОписаниеОповещения("СвойстваФормИЭлементовУправленияПриАктивизацииЯчейкиЗавершение", ЭтотОбъект);
//			ПоказатьВыборИзСписка(ОписаниеОповещения, ТекущиеДанныеСвойства.ДанныеВыбора, Элементы.СвойстваФормИЭлементовУправления.ТекущийЭлемент);
//			
//		КонецЕсли;
//	КонецЕсли;
//	
//---
//	ТекущиеДанные = Элементы.СвойстваФормИЭлементовУправления.ТекущиеДанные;
//	Если Истина
//		И ТипЗнч(ТекущиеДанные.Значение) = Тип("СписокЗначений")
//		И ПустаяСтрока(Текст)
//		Тогда
//		
//		СтандартнаяОбработка = Ложь;
//		
//		ТекущиеДанныеПрототип = Элементы.ФормыИЭлементыУправления.ТекущиеДанные;
//		ТекущиеДанныеСвойства = Элементы.СвойстваФормИЭлементовУправления.ТекущиеДанные;
//		
//		ПараметрыФормы = Новый Структура;
//		ПараметрыФормы.Вставить("ТипЗначения", ТекущиеДанныеПрототип.ТипЗначения);
//		ПараметрыФормы.Вставить("СписокВыбора", ТекущиеДанныеСвойства.Значение);
//		
//		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗначениеНачалоВыбораЗавершение", ЭтотОбъект);
//		ОткрытьФорму("ВнешняяОбработка.Эскиз.Форма.СписокВыбораПоля", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//		
//	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанныеСвойства = Элементы.СвойстваФормИЭлементовУправления.ТекущиеДанные;
	ТекущиеДанныеСвойства.Значение = Результат;
	ТекущиеДанныеСвойства.ЗначениеПредставление = Результат;

	Элементы.СвойстваФормИЭлементовУправления.ЗакончитьРедактированиеСтроки(Ложь);

	ОбработатьИзменениеСвойства();
	
КонецПроцедуры
